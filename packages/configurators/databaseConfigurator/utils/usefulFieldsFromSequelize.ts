import { FieldConfig, FieldType, RegexType } from "@decorators/models/_types";
import { Model } from "@models/Model";
import { Field } from "../../../decorators/models/field/field";

export type SequelizeTableParams = {
  type: any;
  primaryKey: boolean;
  allowNull: boolean;
  _autoGenerated: boolean;
  fieldName: string;
  unique: boolean;
  _modelAttribute: boolean;
  onDelete?: "SET NULL";
  onUpdate?: "CASCADE";
  field: string;
  references?: {
    model: string;
    key: string;
  };
};

export type EditTableParams = {
  type: FieldType;
  primaryKey: boolean;
  allowNull: boolean;
  unique: boolean;
  fieldName: string;
  references?: {
    model: string;
    key: string;
  };
  label?: string;
  regex?: RegexType;
  min?: number;
  max?: number;
  enum?: string[];
};

export function usefulFieldsFromSequelize(
  fields: SequelizeTableParams[],
  fieldsCdm?: { [key: string]: FieldConfig }
): EditTableParams[] {
  let editFields: EditTableParams[];

  editFields = fields.map((f) => {
    let otherConfig: FieldConfig | undefined = undefined;
    if (fieldsCdm) otherConfig = fieldsCdm[f.fieldName];
    return {
      ...f,
      ...otherConfig,
      type: f.type.key,
    };
  });

  return editFields;
}
